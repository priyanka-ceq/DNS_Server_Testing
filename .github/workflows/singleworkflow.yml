name: "DNS_Servers"

on:
  workflow_dispatch:
    inputs:
      infra_env:
        description: "Environment Name"
        required: true
        type: choice
        options:
        - dev
        - sandbox
        - nonprod
        - prod
      resource_group_name:
        description: "Resource Group Name"
        required: true
      vm_or_vnet_choice:
        description: "Add DNS Server to Virtual Machine or Virtual Network"
        required: true
        type: choice
        options:
        - Virtual Machine
        - Virtual Network
      vm_or_vnet_name:
        description: "Type Virtual Machine or Virtual Network Name"
        required: true
      dns_servers_ip:
        description: "DNS Servers"
        required: true

jobs:
  DNS_Server:
    name: "DNS_Server"
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: "Setting Environment"
        env:
          DEV: ${{ contains(github.event.inputs.infra_env, 'dev') }}
        run: |
          if ${DEV} == true; then
            echo "ARM_CLIENT_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_CLIENT_ID}}" >> $GITHUB_ENV
            echo "ARM_CLIENT_SECRET=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_CLIENT_SECRET}}" >> $GITHUB_ENV
            echo "ARM_SUBSCRIPTION_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_SUBS_ID}}" >> $GITHUB_ENV
            echo "ARM_TENANT_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_TENANT_ID}}" >> $GITHUB_ENV
            echo "TFSTATE_RG=cloudeq" >> $GITHUB_ENV
            echo "TFSTATE_STORAGE_ACCOUNT=ceqstoragecd02" >> $GITHUB_ENV
            echo "TFSTATE_CONTAINER=tfstate" >> $GITHUB_ENV
            echo "ENV=dev" >> $GITHUB_ENV
          else
            echo "environment not supported"
            exit 1
          fi

      - name: Plan Review Step
        env:
          VM: ${{ contains(github.event.inputs.vm_or_vnet_choice, 'Virtual Machine') }}
          VNet: ${{ contains(github.event.inputs.vm_or_vnet_choice, 'Virtual Network') }}
          RgName: ${{ github.event.inputs.resource_group_name }}
          DNSServers: ${{ github.event.inputs.dns_servers_ip }}
          VMorVNetName: ${{ github.event.inputs.vm_or_vnet_name }}
        run: |
          if ${VM} == true; then
            echo $VM
            echo $VNet
            echo "DNS Server $DNSServers is being added to the virtual machine $VMorVNetName in the resource group $RgName."
          else
            echo "DNS Server $DNSServers is being added to the virtual network $VMorVNetName in the resource group $RgName."
          fi

  DNS_Server_Addition:
    name: "DNS_Server_Addition"
    runs-on: ubuntu-latest
    needs: ["DNS_Server"]

    environment:
      name: Deployment_Review

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: "Setting Environment"
        env:
          DEV: ${{ contains(github.event.inputs.infra_env, 'dev') }}
        run: |
          if ${DEV} == true; then
            echo "ARM_CLIENT_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_CLIENT_ID}}" >> $GITHUB_ENV
            echo "ARM_CLIENT_SECRET=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_CLIENT_SECRET}}" >> $GITHUB_ENV
            echo "ARM_SUBSCRIPTION_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_SUBS_ID}}" >> $GITHUB_ENV
            echo "ARM_TENANT_ID=${{secrets.CEQ_AZURE_SANDBOX_TF_ARM_TENANT_ID}}" >> $GITHUB_ENV
            echo "TFSTATE_RG=cloudeq" >> $GITHUB_ENV
            echo "TFSTATE_STORAGE_ACCOUNT=ceqstoragecd02" >> $GITHUB_ENV
            echo "TFSTATE_CONTAINER=tfstate" >> $GITHUB_ENV
            echo "ENV=dev" >> $GITHUB_ENV
          else
            echo "environment not supported"
            exit 1
          fi

      # Checkout the repository to the GitHub Actions runner
      - name: Login to azure
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ env.ARM_CLIENT_ID }}","clientSecret":"${{ env.ARM_CLIENT_SECRET }}","subscriptionId":"${{ env.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ env.ARM_TENANT_ID }}"}'
          enable-AzPSSession: true

      - name: Download Azure Dependencies Modules
        uses: azure/powershell@v1
        with:
          inlineScript: |
            Install-Module -Name Az.Compute -Force -AllowClobber
            Install-Module -Name Az.Storage -Force -AllowClobber
            Install-Module -Name Az.Network -Force -AllowClobber 
            Install-Module -Name Az.Resources -Force -AllowClobber
          
          azPSVersion: "5.0.0"

      - name: DNS Server Addition to VM
        uses: azure/powershell@v1
        env:
          VM: ${{ contains(github.event.inputs.vm_or_vnet_choice, 'Virtual Machine') }}
          VNet: ${{ contains(github.event.inputs.vm_or_vnet_choice, 'Virtual Network') }}
          RgName: ${{ github.event.inputs.resource_group_name }}
          DNSServers: ${{ github.event.inputs.dns_servers_ip }}
          VMorVNetName: ${{ github.event.inputs.vm_or_vnet_name }}
        with:
          inlineScript: |
            Write-output "$RgName"
            Write-output "$VMorVNetName"
            Write-output "$DNSServers"
            try {
              if(${VM} -eq $true){  
                $vm = Get-AzVM -ResourceGroupName $RgName -Name $VMorVNetName
                $nicID = $vm.NetworkProfile.NetworkInterfaces[0].Id
                $nic = Get-AzNetworkInterface -ResourceId $nicID
                $nic.DnsSettings.DnsServers = $DNSServers
                $nic | Set-AzNetworkInterface
                $nic.DnsSettings.DnsServers
              } else {
                $vnet = Get-AzVirtualNetwork -ResourceGroupName $RgName -Name $VMorVNetName
                $vnet.DhcpOptions.DnsServers = $DNSServers
                $vnet | Set-AzVirtualNetwork
                $vnet.DhcpOptions.DnsServers
              }
            } catch {
              Write-Host "An error occurred: $($_.Exception.Message)"
            }

          azPSVersion: "5.0.0"